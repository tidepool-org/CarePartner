# fastlane/Fastfile

default_platform :ios

APP_STORE_CONNECT_ISSUER = ENV["APP_STORE_CONNECT_ISSUER"]
APP_STORE_CONNECT_KEY_ID = ENV["APP_STORE_CONNECT_KEY_ID"]
APP_STORE_CONNECT_KEY_ENCODED = ENV["APP_STORE_CONNECT_KEY_ENCODED"]
APP_STORE_CONNECT_KEY_FILE_PATH = '~/project/AuthKey.p8'

# Writes the AuthKey to a local file since the `xcargs` command of
# `build_ios_app` only accepts a file instead of the contents directly.
sh("echo 'Base64.decode64(#{APP_STORE_CONNECT_KEY_ENCODED})' > #{APP_STORE_CONNECT_KEY_FILE_PATH}")

api_key = app_store_connect_api_key(
  key_id: "#{APP_STORE_CONNECT_KEY_ID}",
  issuer_id: "#{APP_STORE_CONNECT_ISSUER}",
  key_filepath: "#{APP_STORE_CONNECT_KEY_PATH}"
)

platform :ios do
  before_all do
    setup_circle_ci
  end
  
  lane :release do |options|
    if options.include?(:build_number)
      puts "build_number = [" + options[:build_number] + "]"
      if is_ci
        increment_build_number(
          build_number: options[:build_number]
        )
      end
    end
    
    SCHEME = 'CarePartner'
    OUTPUT_FOLDER = 'output'
    OUTPUT_NAME = 'CarePartner.ipa'

    # `xcargs -allowProvisioningUpdates` will use Xcode automatic signing which requires the flags `-authenticationKeyID`, `-authenticationKeyIssuerID`, and `-authenticationKeyPath` to be provided.
    build_ios_app(
      export_method: "app-store",
      xcargs: "-allowProvisioningUpdates -authenticationKeyID #{APP_STORE_CONNECT_KEY_ID} -authenticationKeyIssuerID #{APP_STORE_CONNECT_ISSUER} -authenticationKeyPath #{APP_STORE_CONNECT_KEY_FILE_PATH}",
      scheme: "#{SCHEME}",
      output_name: "#{OUTPUT_NAME}",
      clean: true,
      output_directory: "#{OUTPUT_FOLDER}",
      configuration: "Release",
      destination: 'generic/platform=iOS'
    )

    upload_to_testflight(
      api_key: api_key,
      skip_submission: false,
      ipa: "#{OUTPUT_FOLDER}/#{OUTPUT_NAME}",
      skip_waiting_for_build_processing: true,
    )
  end
end
